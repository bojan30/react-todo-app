{"version":3,"sources":["components/Nav.jsx","components/Todo.jsx","components/Todos.jsx","components/AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Todo","props","onClick","toggleCompleteTodo","todo","id","concat","completed","task","deleteTodo","Todos","_this","this","completedTodos","todos","filter","activeTodos","completedTodosList","map","components_Todo","key","activeTodosList","length","React","Component","AddTodo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","state","newTodo","addTodo","Date","getTime","resetInput","setState","handleInput","input","target","value","onSubmit","onChange","type","placeholder","App","todosCopy","toConsumableArray","todoID","newTodos","components_Nav","components_AddTodo","components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8312024f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"nav\">\r\n      <div className=\"logo\">\r\n        My Planner\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react'\r\n\r\nconst Todo = (props) => {\r\n  return (\r\n    <li>\r\n      <div className=\"todo\">\r\n        <button \r\n          onClick = {() => {props.toggleCompleteTodo(props.todo.id)}} \r\n          className={`check-item ${props.todo.completed ? 'checked' : ''}`}>\r\n        </button>\r\n        <span>{props.todo.task}</span>\r\n      </div>\r\n      <button onClick = {() => {props.deleteTodo(props.todo.id)}} className=\"delete-item\">\r\n        <i className=\"fas fa-times\"></i>\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo'\r\nclass Todos extends React.Component{\r\n  render(){\r\n    const completedTodos = this.props.todos.filter(todo => todo.completed);\r\n    const activeTodos = this.props.todos.filter(todo => !todo.completed);\r\n    const completedTodosList = completedTodos.map(todo => {\r\n      return (\r\n        <Todo \r\n          toggleCompleteTodo = {this.props.toggleCompleteTodo} \r\n          deleteTodo = {this.props.deleteTodo} \r\n          key={todo.id} \r\n          todo={todo} \r\n        />\r\n      )\r\n    })\r\n    const activeTodosList = activeTodos.map(todo => {\r\n      return (\r\n        <Todo toggleCompleteTodo={this.props.toggleCompleteTodo} \r\n        deleteTodo = {this.props.deleteTodo} \r\n        key={todo.id} \r\n        todo={todo} />\r\n      )\r\n    })\r\n    return (\r\n      <div className=\"todos-wrapper\">\r\n        <div className=\"to-do\">\r\n          <h4>To do</h4>\r\n          <ul>\r\n            {activeTodosList.length ? activeTodosList : <div>No todos left</div>}\r\n          </ul>\r\n        </div>\r\n        <div className=\"completed\">\r\n          <h4>Completed</h4>\r\n          <ul>\r\n            {completedTodosList.length ? completedTodosList : <div>No todos completed</div>}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\n\r\nclass AddTodo extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      newTodo: ''\r\n    }\r\n  }\r\n  handleSubmit = (e) => {\r\n    //prevent reload\r\n    e.preventDefault();\r\n    //add todo\r\n    if(this.state.newTodo){\r\n      this.props.addTodo({\r\n        id: new Date().getTime(),\r\n        task: this.state.newTodo,\r\n        completed: false,\r\n      })\r\n      this.resetInput();\r\n    }\r\n  }\r\n  resetInput = () => {\r\n    this.setState({\r\n      newTodo: ''\r\n    })\r\n  }\r\n  handleInput = (e) => {\r\n    const input = e.target.value;\r\n    this.setState({\r\n      newTodo: input\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"add-item-wrapper\">\r\n        <form onSubmit = {this.handleSubmit}>\r\n          <input \r\n            onChange = {this.handleInput} \r\n            type=\"text\" \r\n            placeholder=\"Add item\" \r\n            value = {this.state.newTodo}\r\n          />\r\n          <button className=\"add-item\">\r\n            <i className=\"fas fa-plus\"></i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n    \r\nexport default AddTodo;","import React from 'react';\r\nimport Nav from './components/Nav'\r\nimport Todos from './components/Todos'\r\nimport AddTodo from './components/AddTodo'\r\nimport './App.css'\r\n\r\nclass App extends React.Component{\r\n  state = {\r\n    todos: [\r\n      \r\n    ]\r\n  }\r\n  addTodo = (todo) => {\r\n    //make a copy of todos for immutability sake\r\n    const todosCopy = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos: todosCopy\r\n    })\r\n  }\r\n  toggleCompleteTodo = (todoID) => {\r\n    const todosCopy = this.state.todos;\r\n    todosCopy.map(todo=>{\r\n      if(todo.id === todoID){\r\n        (todo.completed) ? todo.completed = false : todo.completed = true\r\n        return todo;\r\n      }\r\n      else{\r\n        return todo;\r\n      }\r\n    })\r\n    this.setState({\r\n      todos: todosCopy\r\n    })\r\n  }\r\n  deleteTodo = (todoID) => {\r\n    const newTodos = this.state.todos.filter(todo=>todo.id !== todoID);\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"container\">\r\n        <Nav />\r\n        <AddTodo addTodo = {this.addTodo} />\r\n        <Todos toggleCompleteTodo = {this.toggleCompleteTodo} deleteTodo = {this.deleteTodo} todos = {this.state.todos} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}